// <auto-generated />
using System;
using BSWebtoon.Model.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BSWebtoon.Model.Migrations
{
    [DbContext(typeof(BSWebtoonContext))]
    [Migration("20220620165329_Init")]
    partial class Init
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BSWebtoon.Model.Models.AuditType", b =>
                {
                    b.Property<int>("AuditTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("審核類型")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AuditTypeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AuditTypeId");

                    b.ToTable("AuditType");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CashPlan", b =>
                {
                    b.Property<int>("CashPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashPlanName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("money");

                    b.HasKey("CashPlanId");

                    b.ToTable("CashPlan");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Bgc")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ComicStatusId")
                        .HasColumnType("int");

                    b.Property<string>("ComicVideoMp4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ComicVideoWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FailureCheckReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NamePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeoplePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("TitleVideoMp4")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleVideoWeb")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UpdateWeek")
                        .HasColumnType("int");

                    b.HasKey("ComicId");

                    b.HasIndex("AuditTypeId");

                    b.HasIndex("ComicStatusId");

                    b.ToTable("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicPic", b =>
                {
                    b.Property<int>("ComicPicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("EpId")
                        .HasColumnType("int");

                    b.Property<string>("Jpg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Sort")
                        .HasColumnType("int");

                    b.HasKey("ComicPicId");

                    b.HasIndex("ComicId");

                    b.HasIndex("EpId");

                    b.ToTable("ComicPic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicStatus", b =>
                {
                    b.Property<int>("ComicStatusId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ComicStatusName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ComicStatusId");

                    b.ToTable("ComicStatus");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<string>("CommentContext")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EpId")
                        .HasColumnType("int");

                    b.Property<int?>("LikeCount")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("ReplyToCommentId")
                        .HasColumnType("int");

                    b.Property<string>("Spoiler")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommentId");

                    b.HasIndex("ComicId");

                    b.HasIndex("EpId");

                    b.HasIndex("ReplyToCommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CouponStock", b =>
                {
                    b.Property<int>("CouponStockId")
                        .HasColumnType("int")
                        .HasComment("劵庫存量");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("CouponStockId");

                    b.HasIndex("ComicId");

                    b.HasIndex("MemberId");

                    b.ToTable("CouponStock");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Epsiode", b =>
                {
                    b.Property<int>("EpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ClickCount")
                        .HasColumnType("int");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<string>("EpTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Epimg")
                        .HasColumnType("int");

                    b.Property<string>("FailureCheckReason")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UpdateDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EpId");

                    b.HasIndex("ComicId");

                    b.ToTable("Epsiode");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.GetTicketMethod", b =>
                {
                    b.Property<int>("GetTicketMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ComicId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("GetTicketMethodEndDate")
                        .HasColumnType("datetime");

                    b.Property<string>("GetTicketMethodName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("GetTicketMethodStartDate")
                        .HasColumnType("datetime");

                    b.HasKey("GetTicketMethodId");

                    b.HasIndex("ComicId");

                    b.ToTable("GetTicketMethod");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.KeywordConnect", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("KeywordDetailId")
                        .HasColumnType("int");

                    b.HasIndex("ComicId");

                    b.HasIndex("KeywordDetailId");

                    b.ToTable("KeywordConnect");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.KeywordDetail", b =>
                {
                    b.Property<int>("KeywordDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("KeyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("KeywordDetailId");

                    b.ToTable("KeywordDetail");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.LoginType", b =>
                {
                    b.Property<int>("LoginTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LoginTypeId");

                    b.ToTable("LoginType");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Balance")
                        .HasColumnType("money")
                        .HasComment("餘額");

                    b.Property<int>("LoginTypeId")
                        .HasColumnType("int")
                        .HasComment("登入型態");

                    b.Property<string>("MemberName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<bool>("Setting")
                        .HasColumnType("bit")
                        .HasComment("設定");

                    b.HasKey("MemberId");

                    b.HasIndex("LoginTypeId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.MyLove", b =>
                {
                    b.Property<string>("Bell")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BgcPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("NamePic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PeoplePic")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ComicId");

                    b.HasIndex("MemberId");

                    b.ToTable("MyLove");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CouponStockId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime");

                    b.Property<int>("EpId")
                        .HasColumnType("int");

                    b.Property<int>("GetId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime");

                    b.Property<int?>("StockQuantity")
                        .HasColumnType("int");

                    b.HasKey("OrderId");

                    b.HasIndex("EpId");

                    b.HasIndex("MemberId");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.PayMethod", b =>
                {
                    b.Property<int>("PayMethodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PayMethodName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PayMethodtype")
                        .HasColumnType("bit");

                    b.HasKey("PayMethodId");

                    b.ToTable("PayMethod");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.RechargeRecord", b =>
                {
                    b.Property<int>("RechargeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CashPlanId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CreateDate")
                        .HasColumnType("datetime");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("PayMethodId")
                        .HasColumnType("int");

                    b.HasKey("RechargeRecordId");

                    b.HasIndex("CashPlanId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PayMethodId");

                    b.ToTable("RechargeRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .HasColumnType("int");

                    b.Property<int>("BeReportedMemberId")
                        .HasColumnType("int");

                    b.Property<int>("CommentId")
                        .HasColumnType("int");

                    b.Property<int>("ReportMemberId")
                        .HasColumnType("int");

                    b.Property<int>("ReportReasonId")
                        .HasColumnType("int");

                    b.HasKey("ReportId");

                    b.HasIndex("BeReportedMemberId");

                    b.HasIndex("CommentId");

                    b.HasIndex("ReportMemberId");

                    b.HasIndex("ReportReasonId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ReportReason", b =>
                {
                    b.Property<int>("ReportReasonId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReportReasonId");

                    b.ToTable("ReportReason");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.UseRecord", b =>
                {
                    b.Property<int>("UseRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CouponStockId")
                        .HasColumnType("int");

                    b.Property<int>("EpId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<DateTime>("UseDateEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("UseDateSart")
                        .HasColumnType("datetime");

                    b.HasKey("UseRecordId");

                    b.HasIndex("CouponStockId");

                    b.HasIndex("EpId");

                    b.HasIndex("MemberId");

                    b.ToTable("UseRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ViewRecord", b =>
                {
                    b.Property<string>("BgPic")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ComicId")
                        .HasColumnType("int");

                    b.Property<int>("ComicPicId")
                        .HasColumnType("int");

                    b.Property<int>("EpId")
                        .HasColumnType("int");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<string>("PeoplePic")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("ComicId");

                    b.HasIndex("ComicPicId");

                    b.HasIndex("EpId");

                    b.HasIndex("MemberId");

                    b.ToTable("ViewRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.AuditType", "AuditType")
                        .WithMany("Comics")
                        .HasForeignKey("AuditTypeId")
                        .HasConstraintName("FK_Comic_ComicCheckType")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.ComicStatus", "ComicStatus")
                        .WithMany("Comics")
                        .HasForeignKey("ComicStatusId")
                        .HasConstraintName("FK_Comic_ComicStatus");

                    b.Navigation("AuditType");

                    b.Navigation("ComicStatus");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicPic", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("ComicPics")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_ComicPic_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Epsiode", "Ep")
                        .WithMany("ComicPics")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_ComicPic_Epsiode")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Ep");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("Comments")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_Comment_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Epsiode", "Ep")
                        .WithMany("Comments")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_Comment_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comment", "ReplyToComment")
                        .WithMany("InverseReplyToComment")
                        .HasForeignKey("ReplyToCommentId")
                        .HasConstraintName("FK_Comment_Comment")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Ep");

                    b.Navigation("ReplyToComment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CouponStock", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("CouponStocks")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_Stocks_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("CouponStocks")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Stocks_Member")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Epsiode", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("Epsiodes")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_Epsiode_Comic")
                        .IsRequired();

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.GetTicketMethod", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("GetTicketMethods")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_GetMethod_Comic");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.KeywordConnect", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_Keyword_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.KeywordDetail", "KeywordDetail")
                        .WithMany()
                        .HasForeignKey("KeywordDetailId")
                        .HasConstraintName("FK_Keyword_KeywordDetail")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("KeywordDetail");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.LoginType", "LoginType")
                        .WithMany("Members")
                        .HasForeignKey("LoginTypeId")
                        .HasConstraintName("FK_Member_LoginType")
                        .IsRequired();

                    b.Navigation("LoginType");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.MyLove", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_MyLove_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MyLove_Member")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Order", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Epsiode", "Ep")
                        .WithMany("Orders")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_Order_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("Orders")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Order_Member")
                        .IsRequired();

                    b.Navigation("Ep");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.RechargeRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.CashPlan", "CashPlan")
                        .WithMany("RechargeRecords")
                        .HasForeignKey("CashPlanId")
                        .HasConstraintName("FK_Recharge_Coin");

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("RechargeRecords")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Recharge_Member")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.PayMethod", "PayMethod")
                        .WithMany("RechargeRecords")
                        .HasForeignKey("PayMethodId")
                        .HasConstraintName("FK_Recharge_PayMethod")
                        .IsRequired();

                    b.Navigation("CashPlan");

                    b.Navigation("Member");

                    b.Navigation("PayMethod");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Report", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Member", "BeReportedMember")
                        .WithMany("ReportBeReportedMembers")
                        .HasForeignKey("BeReportedMemberId")
                        .HasConstraintName("FK_Report_Member")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comment", "Comment")
                        .WithMany("Reports")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Report_Comment")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "ReportMember")
                        .WithMany("ReportReportMembers")
                        .HasForeignKey("ReportMemberId")
                        .HasConstraintName("FK_Report_Member1")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.ReportReason", "ReportReason")
                        .WithMany("Reports")
                        .HasForeignKey("ReportReasonId")
                        .HasConstraintName("FK_Report_ReportReason")
                        .IsRequired();

                    b.Navigation("BeReportedMember");

                    b.Navigation("Comment");

                    b.Navigation("ReportMember");

                    b.Navigation("ReportReason");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.UseRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.CouponStock", "CouponStock")
                        .WithMany("UseRecords")
                        .HasForeignKey("CouponStockId")
                        .HasConstraintName("FK_UseRecord_Stocks")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Epsiode", "Ep")
                        .WithMany("UseRecords")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_UseRecord_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("UseRecords")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_UseRecord_Member")
                        .IsRequired();

                    b.Navigation("CouponStock");

                    b.Navigation("Ep");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ViewRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_ViewRecord_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.ComicPic", "ComicPic")
                        .WithMany()
                        .HasForeignKey("ComicPicId")
                        .HasConstraintName("FK_ViewRecord_ComicPic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Epsiode", "Ep")
                        .WithMany()
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_ViewRecord_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany()
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_ViewRecord_Member")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("ComicPic");

                    b.Navigation("Ep");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.AuditType", b =>
                {
                    b.Navigation("Comics");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CashPlan", b =>
                {
                    b.Navigation("RechargeRecords");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.Navigation("ComicPics");

                    b.Navigation("Comments");

                    b.Navigation("CouponStocks");

                    b.Navigation("Epsiodes");

                    b.Navigation("GetTicketMethods");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicStatus", b =>
                {
                    b.Navigation("Comics");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.Navigation("InverseReplyToComment");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CouponStock", b =>
                {
                    b.Navigation("UseRecords");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Epsiode", b =>
                {
                    b.Navigation("ComicPics");

                    b.Navigation("Comments");

                    b.Navigation("Orders");

                    b.Navigation("UseRecords");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.LoginType", b =>
                {
                    b.Navigation("Members");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.Navigation("CouponStocks");

                    b.Navigation("Orders");

                    b.Navigation("RechargeRecords");

                    b.Navigation("ReportBeReportedMembers");

                    b.Navigation("ReportReportMembers");

                    b.Navigation("UseRecords");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.PayMethod", b =>
                {
                    b.Navigation("RechargeRecords");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ReportReason", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
