// <auto-generated />
using System;
using BSWebtoon.Model.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BSWebtoon.Model.Migrations
{
    [DbContext(typeof(BSWeBtoonContext))]
    [Migration("20220629023337_InitialDB8")]
    partial class InitialDB8
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:Collation", "SQL_Latin1_General_CP1_CI_AS")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.15")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BSWebtoon.Model.Models.Activity", b =>
                {
                    b.Property<int>("ActivityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("活動Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ActivityBgColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動背景色");

                    b.Property<string>("ActivityContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動文案(HTML)");

                    b.Property<DateTime>("ActivityEndTime")
                        .HasColumnType("datetime")
                        .HasComment("活動結束時間");

                    b.Property<string>("ActivityImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動圖片");

                    b.Property<string>("ActivityName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("活動名稱");

                    b.Property<DateTime>("ActivityStartTime")
                        .HasColumnType("datetime")
                        .HasComment("活動開始時間");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("活動建立時間");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("刪除活動");

                    b.Property<int>("PrincipalEmployee")
                        .HasColumnType("int")
                        .HasComment("建立該活動的員工");

                    b.HasKey("ActivityId");

                    b.HasIndex("PrincipalEmployee");

                    b.ToTable("Activity");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CashPlan", b =>
                {
                    b.Property<int>("CashPlanId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("金幣儲值方案")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CashPlanContent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("儲值方案內容");

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit")
                        .HasComment("是否啟用");

                    b.Property<decimal>("Price")
                        .HasColumnType("money")
                        .HasComment("價錢");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.HasKey("CashPlanId");

                    b.ToTable("CashPlan");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ClickRecord", b =>
                {
                    b.Property<int>("ClickRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("點擊紀錄ID");

                    b.Property<int>("ComicId")
                        .HasColumnType("int")
                        .HasComment("漫畫Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("點擊的時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.HasKey("ClickRecordId");

                    b.HasIndex("ComicId");

                    b.ToTable("ClickRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.Property<int>("ComicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("漫畫ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEmployeeId")
                        .HasColumnType("int")
                        .HasComment("審核人員(也是上傳人員)");

                    b.Property<string>("AuditFailReason")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("審核失敗原因");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("datetime")
                        .HasComment("審核時間");

                    b.Property<int>("AuditType")
                        .HasColumnType("int")
                        .HasComment("審核狀態");

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("作者");

                    b.Property<string>("BannerVideoMp4")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("短影片");

                    b.Property<string>("BannerVideoWeb")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("短影片");

                    b.Property<string>("BgColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("背景色");

                    b.Property<string>("BgCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("漫畫背景圖");

                    b.Property<string>("ComicChineseName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("漫畫中文名稱");

                    b.Property<string>("ComicEnglishName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("漫畫英文名稱");

                    b.Property<string>("ComicFigure")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("人物圖");

                    b.Property<string>("ComicNameImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("漫畫名稱圖");

                    b.Property<int>("ComicStatus")
                        .HasColumnType("int")
                        .HasComment("漫畫狀態");

                    b.Property<string>("ComicVideoMp4")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("長影片");

                    b.Property<string>("ComicVideoWeb")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("長影片");

                    b.Property<DateTime?>("FinallyPublishDate")
                        .HasColumnType("datetime")
                        .HasComment("完結日期");

                    b.Property<string>("Introduction")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("故事大綱");

                    b.Property<DateTime>("LastPublishDate")
                        .HasColumnType("datetime")
                        .HasComment("最後更新日期");

                    b.Property<string>("Painter")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("繪者");

                    b.Property<DateTime>("PublishDate")
                        .HasColumnType("datetime")
                        .HasComment("發行日期");

                    b.Property<string>("Publisher")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("出版商");

                    b.Property<int?>("UpdateWeek")
                        .HasColumnType("int")
                        .HasComment("更新星期");

                    b.HasKey("ComicId");

                    b.HasIndex("AuditEmployeeId");

                    b.ToTable("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicTag", b =>
                {
                    b.Property<int>("TagId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("關鍵表Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime?>("AuditDate")
                        .HasColumnType("datetime")
                        .HasComment("審核日期");

                    b.Property<int>("AuditEmployeeId")
                        .HasColumnType("int")
                        .HasComment("審核人員(也是上傳人員)");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除該標籤");

                    b.Property<bool>("IsMainTag")
                        .HasColumnType("bit")
                        .HasComment("是否為主要的Tag");

                    b.Property<string>("TagName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("關鍵名稱");

                    b.HasKey("TagId")
                        .HasName("PK_KeywordDetail");

                    b.ToTable("ComicTag");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicTagList", b =>
                {
                    b.Property<int>("ComicId")
                        .HasColumnType("int")
                        .HasComment("漫畫Id");

                    b.Property<int>("TagId")
                        .HasColumnType("int")
                        .HasComment("關鍵字Id(以第一個為最主要的標籤)");

                    b.Property<int>("TageListId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("關鍵字清單ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.HasIndex("ComicId");

                    b.HasIndex("TagId");

                    b.ToTable("ComicTagList");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.Property<int>("CommentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("評論Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Context")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("評論內容");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("評論時間");

                    b.Property<int>("EpId")
                        .HasColumnType("int")
                        .HasComment("集數Id");

                    b.Property<bool>("IsDelete")
                        .HasColumnType("bit")
                        .HasComment("是否刪除");

                    b.Property<bool>("IsSpoiler")
                        .HasColumnType("bit")
                        .HasComment("是否暴雷");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.Property<int?>("ReplyToCommentId")
                        .HasColumnType("int")
                        .HasComment("被回復評論Id");

                    b.HasKey("CommentId");

                    b.HasIndex("EpId");

                    b.HasIndex("MemberId");

                    b.HasIndex("ReplyToCommentId");

                    b.ToTable("Comment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CommentLikeRecord", b =>
                {
                    b.Property<int>("CommentLikesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("留言按讚數Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasComment("評論Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("按讚時間");

                    b.Property<bool>("IsLike")
                        .HasColumnType("bit")
                        .HasComment("是否按讚");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員Id");

                    b.HasKey("CommentLikesId")
                        .HasName("PK_Likes");

                    b.HasIndex("CommentId");

                    b.HasIndex("MemberId");

                    b.ToTable("CommentLikeRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Coupon", b =>
                {
                    b.Property<int>("CouponId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("劵ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ActivityId")
                        .HasColumnType("int")
                        .HasComment("活動Id");

                    b.Property<int?>("ComicId")
                        .HasColumnType("int")
                        .HasComment("漫畫Id");

                    b.Property<int>("CouponTypeId")
                        .HasColumnType("int")
                        .HasComment("券的類型Id(有通用券跟倒數券、閱讀)");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("取得時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int");

                    b.Property<int>("OriginQuantity")
                        .HasColumnType("int")
                        .HasComment("原始數量");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("現有數量");

                    b.HasKey("CouponId");

                    b.HasIndex("ActivityId");

                    b.HasIndex("ComicId");

                    b.ToTable("Coupon");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CouponUsedRecord", b =>
                {
                    b.Property<int>("CouponRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("券使用紀錄ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CouponId")
                        .HasColumnType("int")
                        .HasComment("券ID");

                    b.Property<DateTime>("EndReadTime")
                        .HasColumnType("datetime")
                        .HasComment("結束閱讀日期");

                    b.Property<int>("EpId")
                        .HasColumnType("int")
                        .HasComment("集數");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員");

                    b.Property<DateTime>("StartReadTime")
                        .HasColumnType("datetime")
                        .HasComment("開始閱讀日期");

                    b.HasKey("CouponRecordId")
                        .HasName("PK_UseRecord");

                    b.HasIndex("CouponId");

                    b.HasIndex("EpId");

                    b.HasIndex("MemberId");

                    b.ToTable("CouponUsedRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("員工Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Account")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("帳號");

                    b.Property<string>("EmployeeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("員工姓名(也是上傳人員)");

                    b.Property<DateTime>("HireDate")
                        .HasColumnType("datetime")
                        .HasComment("雇用日期");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("密碼(加密)");

                    b.HasKey("EmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.EpContent", b =>
                {
                    b.Property<int>("EpContentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("漫畫圖片Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EpId")
                        .HasColumnType("int")
                        .HasComment("集數Id");

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("集數內容圖片路徑");

                    b.Property<int>("Page")
                        .HasColumnType("int")
                        .HasComment("頁次");

                    b.HasKey("EpContentId");

                    b.HasIndex("EpId");

                    b.ToTable("EpContent");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Episode", b =>
                {
                    b.Property<int>("EpId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("集數ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEmployeeId")
                        .HasColumnType("int")
                        .HasComment("審核人員(也是上傳人員)");

                    b.Property<string>("AuditFailReason")
                        .HasColumnType("nvarchar(max)")
                        .HasComment("審核不通過原因");

                    b.Property<DateTime>("AuditTime")
                        .HasColumnType("datetime")
                        .HasComment("審核時間");

                    b.Property<int>("AuditTypeId")
                        .HasColumnType("int")
                        .HasComment("審核狀態ID");

                    b.Property<int>("ComicId")
                        .HasColumnType("int")
                        .HasComment("漫畫ID");

                    b.Property<string>("EpCover")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("集數封面照");

                    b.Property<string>("EpTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("集數標題");

                    b.Property<bool>("IsCountdownCoupon")
                        .HasColumnType("bit")
                        .HasComment("是否可使用倒數免費券");

                    b.Property<bool>("IsFree")
                        .HasColumnType("bit")
                        .HasComment("是否為免費");

                    b.Property<DateTime>("UpdateTime")
                        .HasColumnType("datetime")
                        .HasComment("更新時間");

                    b.Property<DateTime>("UploadTime")
                        .HasColumnType("datetime")
                        .HasComment("作者上傳的時間");

                    b.HasKey("EpId")
                        .HasName("PK_Epsiode");

                    b.HasIndex("AuditEmployeeId");

                    b.HasIndex("ComicId");

                    b.ToTable("Episode");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Favorite", b =>
                {
                    b.Property<int>("FavoriteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("我的最愛Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ComicId")
                        .HasColumnType("int")
                        .HasComment("漫畫");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員");

                    b.HasKey("FavoriteId");

                    b.HasIndex("ComicId");

                    b.HasIndex("MemberId");

                    b.ToTable("Favorite");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.LoginType", b =>
                {
                    b.Property<int>("LoginTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("登入方式Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LoginTypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("登入類型名稱(不要有Apple)");

                    b.HasKey("LoginTypeId");

                    b.ToTable("LoginType");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.Property<int>("MemberId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AccessToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("記錄在該登入模式下的相關資料");

                    b.Property<string>("AccountName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("帳號名稱");

                    b.Property<decimal>("Balance")
                        .HasColumnType("money")
                        .HasComment("餘額");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("創建時間");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Email");

                    b.Property<bool>("IsDarkTheme")
                        .HasColumnType("bit")
                        .HasComment("是否為深色模式");

                    b.Property<int>("LoginTypeId")
                        .HasColumnType("int")
                        .HasComment("登入類型");

                    b.Property<string>("NickName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("暱稱");

                    b.HasKey("MemberId");

                    b.HasIndex("LoginTypeId");

                    b.ToTable("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("金流付款方式")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsEnable")
                        .HasColumnType("bit")
                        .HasComment("是否啟用該狀態");

                    b.Property<string>("PaymentName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("付款方式類型名稱");

                    b.Property<int>("Sort")
                        .HasColumnType("int")
                        .HasComment("排序");

                    b.HasKey("PaymentId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.RechargeRecord", b =>
                {
                    b.Property<int>("RechargeRecordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("儲值ID")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CashPlanContent")
                        .HasColumnType("int")
                        .HasComment("儲值方案內容(EX:1200金幣)");

                    b.Property<int?>("CashPlanId")
                        .HasColumnType("int")
                        .HasComment("金幣儲值方案Id");

                    b.Property<DateTime?>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("儲值時間");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員ID");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int")
                        .HasComment("付款方式ID");

                    b.Property<int>("Price")
                        .HasColumnType("int")
                        .HasComment("價錢");

                    b.HasKey("RechargeRecordId");

                    b.HasIndex("CashPlanId");

                    b.HasIndex("MemberId");

                    b.HasIndex("PaymentId");

                    b.ToTable("RechargeRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasComment("檢舉Id")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AuditEmployeeId")
                        .HasColumnType("int")
                        .HasComment("審核人員");

                    b.Property<DateTime?>("AuditTime")
                        .HasColumnType("datetime")
                        .HasComment("審核時間");

                    b.Property<int>("AuditType")
                        .HasColumnType("int")
                        .HasComment("審核狀態");

                    b.Property<int>("CommentId")
                        .HasColumnType("int")
                        .HasComment("評論Id");

                    b.Property<DateTime>("CreateTime")
                        .HasColumnType("datetime")
                        .HasComment("檢舉日期");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("檢舉詳細理由");

                    b.HasKey("ReportId");

                    b.HasIndex("AuditEmployeeId");

                    b.HasIndex("CommentId");

                    b.ToTable("Report");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ViewRecord", b =>
                {
                    b.Property<int>("ViewRecorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("EpContentId")
                        .HasColumnType("int")
                        .HasComment("漫畫圖片Id");

                    b.Property<int>("MemberId")
                        .HasColumnType("int")
                        .HasComment("會員");

                    b.Property<DateTime>("ViewTime")
                        .HasColumnType("datetime")
                        .HasComment("觀看時間");

                    b.HasKey("ViewRecorId");

                    b.HasIndex("EpContentId");

                    b.HasIndex("MemberId");

                    b.ToTable("ViewRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Activity", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Employee", "PrincipalEmployeeNavigation")
                        .WithMany("Activity")
                        .HasForeignKey("PrincipalEmployee")
                        .HasConstraintName("FK_Activity_Employee")
                        .IsRequired();

                    b.Navigation("PrincipalEmployeeNavigation");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ClickRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Member", "ClickRecordNavigation")
                        .WithOne("ClickRecord")
                        .HasForeignKey("BSWebtoon.Model.Models.ClickRecord", "ClickRecordId")
                        .HasConstraintName("FK_ClickRecord_Member")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("ClickRecord")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_ClickRecord_Comic")
                        .IsRequired();

                    b.Navigation("ClickRecordNavigation");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Employee", "AuditEmployee")
                        .WithMany("Comic")
                        .HasForeignKey("AuditEmployeeId")
                        .HasConstraintName("FK_Comic_Employee")
                        .IsRequired();

                    b.Navigation("AuditEmployee");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ComicTagList", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany()
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_ComicTag_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.ComicTag", "Tag")
                        .WithMany()
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_ComicTag_KeywordDetail")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Episode", "Ep")
                        .WithMany("Comment")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_Comment_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("Comment")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Comment_Member")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comment", "ReplyToComment")
                        .WithMany("InverseReplyToComment")
                        .HasForeignKey("ReplyToCommentId")
                        .HasConstraintName("FK_Comment_Comment");

                    b.Navigation("Ep");

                    b.Navigation("Member");

                    b.Navigation("ReplyToComment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CommentLikeRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comment", "Comment")
                        .WithMany("CommentLikeRecord")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Likes_Comment")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("CommentLikeRecord")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Likes_Member")
                        .IsRequired();

                    b.Navigation("Comment");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Coupon", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Activity", "Activity")
                        .WithMany("Coupon")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_Coupon_Activity");

                    b.HasOne("BSWebtoon.Model.Models.Episode", "ActivityNavigation")
                        .WithMany("Coupon")
                        .HasForeignKey("ActivityId")
                        .HasConstraintName("FK_ReadCoupon_Epsiode");

                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("Coupon")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_ReadCoupon_Comic");

                    b.Navigation("Activity");

                    b.Navigation("ActivityNavigation");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CouponUsedRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Coupon", "Coupon")
                        .WithMany("CouponUsedRecord")
                        .HasForeignKey("CouponId")
                        .HasConstraintName("FK_CouponUsedRecord_Coupon")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Episode", "Ep")
                        .WithMany("CouponUsedRecord")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_CouponUsedRecord_Epsiode")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("CouponUsedRecord")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_CouponUsedRecord_Member")
                        .IsRequired();

                    b.Navigation("Coupon");

                    b.Navigation("Ep");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.EpContent", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Episode", "Ep")
                        .WithMany("EpContent")
                        .HasForeignKey("EpId")
                        .HasConstraintName("FK_ComicPic_Epsiode")
                        .IsRequired();

                    b.Navigation("Ep");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Episode", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Employee", "AuditEmployee")
                        .WithMany("Episode")
                        .HasForeignKey("AuditEmployeeId")
                        .HasConstraintName("FK_Episode_Employee")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("Episode")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_Epsiode_Comic")
                        .IsRequired();

                    b.Navigation("AuditEmployee");

                    b.Navigation("Comic");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Favorite", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Comic", "Comic")
                        .WithMany("Favorite")
                        .HasForeignKey("ComicId")
                        .HasConstraintName("FK_MyLove_Comic")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("Favorite")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_MyLove_Member")
                        .IsRequired();

                    b.Navigation("Comic");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.LoginType", "LoginType")
                        .WithMany("Member")
                        .HasForeignKey("LoginTypeId")
                        .HasConstraintName("FK_Member_LoginType")
                        .IsRequired();

                    b.Navigation("LoginType");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.RechargeRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.CashPlan", "CashPlan")
                        .WithMany("RechargeRecord")
                        .HasForeignKey("CashPlanId")
                        .HasConstraintName("FK_RechargeRecord_CashPlan");

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("RechargeRecord")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_Recharge_Member")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Payment", "Payment")
                        .WithMany("RechargeRecord")
                        .HasForeignKey("PaymentId")
                        .HasConstraintName("FK_Recharge_PayMethod")
                        .IsRequired();

                    b.Navigation("CashPlan");

                    b.Navigation("Member");

                    b.Navigation("Payment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Report", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.Employee", "AuditEmployee")
                        .WithMany("Report")
                        .HasForeignKey("AuditEmployeeId")
                        .HasConstraintName("FK_Report_Employee")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Comment", "Comment")
                        .WithMany("Report")
                        .HasForeignKey("CommentId")
                        .HasConstraintName("FK_Report_Comment")
                        .IsRequired();

                    b.Navigation("AuditEmployee");

                    b.Navigation("Comment");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.ViewRecord", b =>
                {
                    b.HasOne("BSWebtoon.Model.Models.EpContent", "EpContent")
                        .WithMany("ViewRecord")
                        .HasForeignKey("EpContentId")
                        .HasConstraintName("FK_ViewRecord_EpContent")
                        .IsRequired();

                    b.HasOne("BSWebtoon.Model.Models.Member", "Member")
                        .WithMany("ViewRecord")
                        .HasForeignKey("MemberId")
                        .HasConstraintName("FK_ViewRecord_Member")
                        .IsRequired();

                    b.Navigation("EpContent");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Activity", b =>
                {
                    b.Navigation("Coupon");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.CashPlan", b =>
                {
                    b.Navigation("RechargeRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comic", b =>
                {
                    b.Navigation("ClickRecord");

                    b.Navigation("Coupon");

                    b.Navigation("Episode");

                    b.Navigation("Favorite");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Comment", b =>
                {
                    b.Navigation("CommentLikeRecord");

                    b.Navigation("InverseReplyToComment");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Coupon", b =>
                {
                    b.Navigation("CouponUsedRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Employee", b =>
                {
                    b.Navigation("Activity");

                    b.Navigation("Comic");

                    b.Navigation("Episode");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.EpContent", b =>
                {
                    b.Navigation("ViewRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Episode", b =>
                {
                    b.Navigation("Comment");

                    b.Navigation("Coupon");

                    b.Navigation("CouponUsedRecord");

                    b.Navigation("EpContent");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.LoginType", b =>
                {
                    b.Navigation("Member");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Member", b =>
                {
                    b.Navigation("ClickRecord");

                    b.Navigation("Comment");

                    b.Navigation("CommentLikeRecord");

                    b.Navigation("CouponUsedRecord");

                    b.Navigation("Favorite");

                    b.Navigation("RechargeRecord");

                    b.Navigation("ViewRecord");
                });

            modelBuilder.Entity("BSWebtoon.Model.Models.Payment", b =>
                {
                    b.Navigation("RechargeRecord");
                });
#pragma warning restore 612, 618
        }
    }
}
